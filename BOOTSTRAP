# Purpose
This document describes how to bootstrap the development and production instances of the fxtrader system

# PreRequisites

## OS

CentOS 8

## SELINUX
    firewall-cmd --permanent --add-port=80/tcp
    yum -y update
    sed -i '/^SELINUX=/c\SELINUX=disabled' /etc/selinux/config
    init 6

## git
    yum -y install git
    ssh-keyscan github.com >> ~/.ssh/known_hosts

## Ansible
    yum -y install epel-release
    yum module reset nginx
    yum module enable nginx:1.20
    yum -y install ansible python3-docker
    chmod o+rx /root # This is necessary in development only so that nginx can read and serve the files from /root/src/fxhistoricaldata_website_static.  The prod version is served via github pages.
    mkdir ~/src && cd ~/src
    #git clone git@github.com:fx-trader/fx-ansible.git
    git clone https://github.com/fx-trader/fx-ansible.git
    cd ~/src/fx-ansible/extensions/setup
    ./role_update.sh
    cd ~/src/fx-ansible
    echo $VAULT_PASS > .vpass
    cd ~/src/fx-ansible/plays
    ansible-playbook -i ../environments/development fx.yml

# Get some personal config files
    git clone git@github.com:joaocosta/home.git ~/src/home
    cp ~/src/home/.bash_aliases ~  #Edit and change fxdata password
    cp ~/src/home/.gitconfig ~
    cp ~/src/home/.vimrc ~
    cp ~/src/home/.tmux.conf ~

# Source code repos

    cd ~/src
    REPOS="fx-trader/Finance-API-Data fx-trader/Finance-HostedTrader fx-trader/Finance-snipers fx-trader/fxhistoricaldata_website_static fx-trader/snipers-api mysqludf/lib_mysqludf_ta"
    for repo in $REPOS; do
        git clone git@github.com:${repo}.git
    done

# Database

The database instance runs inside a docker container. It includes a mysql udf binary optimised to run finance calculations (https://github.com/jo#

## Generate schema

    docker run --rm -v /root/fx/cfg:/etc/fxtrader --network fx-docker fxtrader/finance-hostedtrader bash -c "fx-create-db-schema.pl | fx-db-client.pl"

## Populate data
    fx-shell
    /usr/local/bin/fx-download.pl --timeframes=60 --numItems=150000 --verbose
    exit



# Snipers

## Create database schema

    docker run --rm --network fx-docker fxtrader/snipers-api ruby /webapp/db/schema.rb

## Create data necessary to run things
#
    # Create sniper_client account
    docker run --rm --network fx-docker fxtrader/snipers-api ruby /webapp/db/create_account.rb --sniper-client --email sniper_client@fxdev00 --password $(cat /tmp/p)
    # Create public account
    docker run --rm --network fx-docker fxtrader/snipers-api ruby /webapp/db/create_account.rb --email joaocosta@zonalivre.org --password $(cat /tmp/p)

    MY_TOKEN=$(curl -s -F email=joaocosta@zonalivre.org -F password=`cat /tmp/p` http://localhost:5567/login | jq -r .token)

    curl --request POST \
        -H "Authorization: Bearer $MY_TOKEN" \
        --data '{"account_type": "demo", "token": "'`cat /tmp/demo.token`'"}' http://localhost:5567/provideroanda

    curl --request POST \
        -H "Authorization: Bearer $MY_TOKEN" \
        --data '{"account_type": "real", "token": "'`cat /tmp/prod.token`'"}' http://localhost:5567/provideroanda

# Get fxhistoricaldata static website
    cd ~/src
    #git clone https://github.com/fx-trader/fxhistoricaldata_website_static.git
    git clone git@github.com:fx-trader/fxhistoricaldata_website_static.git

---

# HOWTO

## Dev container
make sure mydevapi.fxhistoricaldata.com is mapped to the VM in /etc/hosts
Access at http://mydevapi.fxhistoricaldata.com/indicator?t=5minute&e=ema(close,200)&s=XAGUSD&d=5&l=10000.

docker run  --rm \
            -ti \
            -v /root/src:/src \
            -v /root/fx/cfg:/etc/fxtrader \
            -v /usr/share/nginx/html/fxapi:/public_html \
            -e PERL5LIB=/src/Finance-HostedTrader/lib \
            -e PATH=/src/Finance-HostedTrader/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/root/bin \
            -p 5002:5000 \
            --network fx-docker \
            fxtrader/finance-api-data \
            bash # Then run plackup /src/Finance-API-Data/bin/app.psgi


## Optimize mariadb tables

    docker exec -ti fxapi-data bash
    time fx-all-tables.pl --timeframes=60 --template="REPAIR TABLE TABLE_NAME;" | fx-db-client.pl.
    time fx-all-tables.pl --timeframes=60 --template="OPTIMIZE TABLE TABLE_NAME;" | fx-db-client.pl.
