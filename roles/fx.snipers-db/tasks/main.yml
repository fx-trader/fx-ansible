---
# tasks file for fx.snipers-db

- name: Create snipers-db directories to store postgres configuration and data
  file:
    path:  "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "{{ snipers['cfgdir'] }}"
    - "{{ snipers['datadir'] }}"

- name: "Download {{role_path|basename}} postgresql image"
  docker_image:
    name: postgres:13
    source: pull

- name: snipers-db container
  docker_container:
    name: snipers-db
    image: postgres:13
    volumes:
      - "{{snipers['datadir']}}:/var/lib/postgresql/data"
#    hostname: "{{ snipers['db']['hostname'] }}"
    networks:
      - name: "{{ fx.docker.network.name }}"
    purge_networks: yes
    state: started
    restart_policy: always
    env:
      POSTGRES_USER: "{{ snipers['db']['user'] }}"
      POSTGRES_PASSWORD: "{{ snipers['db']['pass'] }}"
      POSTGRES_DB: "{{ snipers['db']['name'] }}"

- name: Set useful shell aliases
  template:
    src: "etc/profile.d/{{ item }}"
    dest: "/etc/profile.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - fx.snipers-db.sh


# Upgrading postgres major version
# docker rm -f snipers-db
# mv "{{snipers['datadir']}}" "{{snipers'datadir'}}.old"
# mkdir {{snipers['datadir']}}
# docker run --name snipers-db-new -v {{snipers['datadir']:/var/lib/postgresql/data -e "POSTGRES_USER=$user" -e "POSTGRES_PASSWORD=$pwd" -e "POSTGRES_DB=$db" -d postgres:$new_version
# docker run --name snipers-db-old -v {{snipers['datadir'].old:/var/lib/postgresql/data -e "POSTGRES_USER=$user" -e "POSTGRES_PASSWORD=$pwd" -e "POSTGRES_DB=$db" -d postgres:$old_version
# docker exec snipers-db-old pg_dumpall -U $user | docker exec -i snipers-db-new psql -U $user $db
# docker rm -f snipers-db-{new,old} snipers-db snipers-api-admin snipers-api-public
# Rerun ansible to recreate snipers-db, snipers-api-admin and snipers-api-public

